"""
API for E. Bertin's Astromatic software suite
"""
from __future__ import print_function, division
from toyz.utils.errors import ToyzError
import subprocess
import os

codes = {
    'Eye': 'eye', 
    'MissFITS': 'missfits', 
    'PSFEx': 'psfex', 
    'SCAMP': 'scamp', 
    'SExtractor': 'sex', 
    #'SkyMaker': '', 
    'STIFF': 'stiff',
    #'Stuff': '',
    'SWarp': 'swarp',
    'WeightWatcher': 'ww'
}

class AstromaticError(ToyzError):
    pass

def convert_hdu_to_ldac(hdu):
    """
    Convert an hdu table to a fits_ldac table (format used by astromatic suite)
    
    Parameters
    ----------
    hdu: `astropy.io.fits.BinTableHDU` or `astropy.io.fits.TableHDU`
        HDUList to convert to fits_ldac HDUList
    
    Returns
    -------
    tbl1: `astropy.io.fits.BinTableHDU`
        Header info for fits table (LDAC_IMHEAD)
    tbl2: `astropy.io.fits.BinTableHDU`
        Data table (LDAC_OBJECTS)
    """
    from astropy.io import fits
    import numpy as np
    tblhdr = np.array([hdu.header.tostring(',')])
    col1 = fits.Column(name='Field Header Card', array=tblhdr, format='13200A')
    cols = fits.ColDefs([col1])
    tbl1 = fits.BinTableHDU.from_columns(cols)
    tbl1.header['TDIM1'] = '(80, {0})'.format(len(hdu.header))
    tbl1.header['EXTNAME'] = 'LDAC_IMHEAD'
    tbl2 = fits.BinTableHDU(hdu.data)
    tbl2.header['EXTNAME'] = 'LDAC_OBJECTS'
    return (tbl1, tbl2)

def convert_table_to_ldac(tbl):
    """
    Convert an astropy table to a fits_ldac
    
    Parameters
    ----------
    tbl: `astropy.table.Table`
        Table to convert to ldac format
    Returns
    -------
    hdulist: `astropy.io.fits.HDUList`
        FITS_LDAC hdulist that can be read by astromatic software
    """
    from astropy.io import fits
    import tempfile
    f = tempfile.NamedTemporaryFile(suffix='.fits', mode='rb+')
    tbl.write(f, format='fits')
    f.seek(0)
    hdulist = fits.open(f, mode='update')
    tbl1, tbl2 = convert_hdu_to_ldac(hdulist[1])
    new_hdulist = [hdulist[0], tbl1, tbl2]
    new_hdulist = fits.HDUList(new_hdulist)
    return new_hdulist

def get_table_from_ldac(filename, frame=1):
    """
    Load an astropy table from a fits_ldac by frame (Since the ldac format has column 
    info for odd tables, giving it twce as many tables as a regular fits BinTableHDU,
    match the frame of a table to its corresponding frame in the ldac file).
    
    Parameters
    ----------
    filename: str
        Name of the file to open
    frame: int
        Number of the frame in a regular fits file
    """
    from astropy.table import Table
    if frame>0:
        frame = frame*2
    tbl = Table.read(filename, hdu=frame)
    return tbl

class Astromatic:
    """
    Class to hold config options for an Astrometric code. 
    """
    def __init__(self, code, temp_path=None, config={}, config_file=None, store_output=False, 
            **kwargs):
        """
        Initialize a particular astromatic code with a given set of configurations.
        
        Parameters
        ----------
        code: str
            Name of the code to use
        temp_path: str
            Path to store temporary files generated by the astromatic code (such as 
            resamp files in SWarp)
        config: dict (optional)
            Dictionary of configuration options to pass in the command line.
        config_file: str (optional)
            Name of the configuration file to use. If none is specified, the default
            config file for the given code is used
        store_output: boolean (optional)
            If ``store_output`` is ``False``, the output of the code is printed to 
            sys.stdout. If ``store_output`` is ``True`` the output is saved in a variable
            that is returned when the function is run.
        """
        self.code = code
        if code not in codes:
            print("Warning: '{0} not in Astromatic codes, you will need to specify " +
                "a 'cmd' to run".format(code))
        self.temp_path = temp_path
        self.config = config
        self.config_file = config_file
        self.store_output = store_output
        for k, v in kwargs.items():
            setattr(self, k, v)
    
    def build_cmd(self, filenames, **kwargs):
        """
        Build a command to run an astromatic code.
        
        Parameters
        ----------
        filenames: str or list
            Name of a file or list of filenames to run in the command line statement
        **kwargs: keyword arguments
            The following are optional keyword arguments that may be used:
                - code: str
                    Name of the astromatic code to use. This should be contained in 
                    ``astrotoyz.astromatic.api.codes``
                - config: dict (optional)
                    Dictionary of configuration options to pass in the command line.
                - config_file: str (optional)
                    Name of the configuration file to use. If none is specified, the default
                    config file for the given code is used
        
        Returns
        -------
        cmd: str
            Commandline statement to run the given code
        kwargs: dict
            Dictionary of keyword arguments used in the build
        """
        # If a single catalog is passed, convert to an array
        if not isinstance(filenames, list):
            filenames = [filenames]
        # Update kwargs with any missing variables
        for attr, attr_val in vars(self).items():
            if attr not in kwargs:
                kwargs[attr] = attr_val
        # If the user did not specify a params file, create one in the temp directory and 
        # update the config parameters
        if kwargs['code']=='SExtractor':
            if 'PARAMETERS_NAME' not in kwargs['config']:
                if 'temp_path' not in kwargs:
                    raise AstromaticError(
                        "You must either supply a 'PARAMETERS_NAME' in 'config' or "+
                        "a 'temp_path' to store the temporary parameters file")
                param_name = os.path.join(kwargs['temp_path'], 'sex.param')
                f = open(param_name, 'w')
                if 'params' not in kwargs:
                    raise AstromaticError(
                        "To run SExtractor yo must either supply a 'params' list of parameters "+
                        "or a config keyword 'PARAMETERS_NAME' that points to a parameters file")
                for p in kwargs['params']:
                    f.write(p+'\n')
                f.close()
                kwargs['config']['PARAMETERS_NAME'] = param_name
        # Get the correct command for the given code (if one is not specified)
        if 'cmd' not in kwargs:
            if kwargs['code'] not in codes:
                raise AstromaticError(
                    "You must either supply a valid astromatic 'code' name or "+
                    "a 'cmd' to run")
            cmd = codes[kwargs['code']]
        else:
            cmd = kwargs['cmd']
        if cmd[-1]!=' ':
            cmd += ' '
        # Append the filename(s) that are run by the code
        cmd += ' '.join(filenames)
        # If the user specified a config file, use it
        if kwargs['config_file'] is not None:
            cmd += ' -c '+kwargs['config_file']
        # Add on any user specified parameters
        for param in kwargs['config']:
            if isinstance(kwargs['config'][param], bool):
                if kwargs['config'][param]:
                    val='Y'
                else:
                    val='N'
            else:
                val = kwargs['config'][param]
            cmd += ' -'+param+' '+val
        return (cmd, kwargs)
    
    def run(self, filenames, **kwargs):
        """
        Build the command and run the code with a given set of options. If one of the
        keyword arguments is ``store_output=True`` the output of the code is returned,
        otherwise the status of the codes execution is returned.
        
        Parameters
        ----------
        filenames: str or list
            Name of a file or list of filenames to run in the command line statement
        **kwargs: keyword arguments
            The following are optional keyword arguments that may be used:
                - code: str
                    Name of the astromatic code to use. This should be contained in 
                    ``astrotoyz.astromatic.api.codes``
                - config: dict (optional)
                    Dictionary of configuration options to pass in the command line.
                - config_file: str (optional)
                    Name of the configuration file to use. If none is specified, the default
                    config file for the given code is used
        
        Returns
        -------
        status: str
            Status of the execution. If the code runs successfully this will return success
        output: str
            If ``store_option=True`` is passed as a keyword argument and it runs successfully,
            the output of the code is returned. If there is an error in the codes execution,
            a status is returned that is the error generated by the astromatic code.
        """
        this_cmd, kwargs = self.build_cmd(filenames, **kwargs)
        # Run code
        print(this_cmd, '\n')
        if kwargs['store_output']:
            p = subprocess.Popen(this_cmd, shell=True, stdout=subprocess.PIPE, 
                stderr=subprocess.STDOUT)
        else:
            subprocess.call(this_cmd, shell=True)
        
        status =  'success'
        # Check for errors
        if kwargs['store_output']:
            output = p.stdout.readlines()
            for line in output:
                if 'error' in line.lower():
                    status = line
                    break
            return output
        return status
    
    def run_sex_frames(self, filenames, frames='1', show_all_cmds=False, **kwargs):
        """
        If the user is running sextractor on an individual frame, this command will
        correctly add the frame to the image filename, flag filename, and weightmap filename
        (if they are specified).
        
        Parameters
        ----------
        filenames: str or list
            Name of a file or list of filenames to run in the command line statement
        frames: str
            CSV string with frames to be run in SExtractor.
        show_all_cmds: bool (optional)
            Each frame is run individually and if ``show_all_cmds`` is ``True`` then the
            shell command for each command to run is printed to the screen.
        **kwargs: keyword arguments
            The following are optional keyword arguments that may be used:
                - code: str
                    Name of the astromatic code to use. This should be contained in 
                    ``astrotoyz.astromatic.api.codes``
                - config: dict (optional)
                    Dictionary of configuration options to pass in the command line.
                - config_file: str (optional)
                    Name of the configuration file to use. If none is specified, the default
                    config file for the given code is used
        
        Returns
        -------
        status: str
            Status of the execution. If the code runs successfully this will return success
        output: str
            If ``store_option=True`` is passed as a keyword argument and it runs successfully,
            the output of the code is returned. If there is an error in the codes execution,
            a status is returned that is the error generated by the astromatic code.
        """
        this_cmd, kwargs = self.build_cmd(filenames, **kwargs)
        if not show_all_cmds:
            print('base command:\n', this_cmd)
        if 'FLAG_IMAGE' in kwargs['config']:
            flag_img = kwargs['config']['FLAG_IMAGE']
        else:
            flag_img = None
        if 'WEIGHT_IMAGE' in kwargs['config']:
            weight_img = kwargs['config']['WEIGHT_IMAGE']
        else:
            weight_img = None
        for frame in frames.split(','):
            new_cmd = this_cmd
            frame_str = '['+frame+']'
            # Convert all multi-extension files to filenames with the same frame specified
            if not isinstance(filenames, list):
                filenames = [filenames]
            for filename in filenames:
                new_cmd = new_cmd.replace(filename, filename+frame_str)
            if flag_img is not None:
                new_cmd = new_cmd.replace(flag_img, flag_img+frame_str)
            if weight_img is not None:
                new_cmd = new_cmd.replace(weight_img, weight_img+frame_str)
            if show_all_cmds:
                print(new_cmd, '\n')
            # Run code
            if kwargs['store_output']:
                p = subprocess.Popen(new_cmd, shell=True, stdout=subprocess.PIPE, 
                    stderr=subprocess.STDOUT)
            else:
                subprocess.call(new_cmd, shell=True)
    
        status =  'success'
        # Check for errors
        if kwargs['store_output']:
            output = p.stdout.readlines()
            for line in output:
                if 'error' in line.lower():
                    status = line
                    break
        return status
    def get_version(self, cmd=None):
        """
        Get the version of the currently loaded astromatic code
        
        Parameters
        ----------
        cmd: str (optional)
            Name of the command to run. If this isn't specified it will use the cmd
            specified when the ``Astromatic`` class was initialized. This is usually
            just the code to run (for example 'sex', 'scamp', 'swarp', 'psfex', ...)
            but occationally if the user doesn't have root privilages this may be
            another location (for example ``~/astromatic/bin/sex``).
        Retruns
        -------
        version: str
            Version of the specified astromatic code
        date: str
            Date associated with the specified astromatic code
        """
        # Get the correct command for the given code (if one is not specified)
        if cmd is None:
            if self.code not in codes:
                raise AstromaticError(
                    "You must either supply a valid astromatic 'code' name or a 'cmd'")
            cmd = codes[self.code]
        if cmd[-1]!=' ':
            cmd += ' '
        cmd += '-v'
        try:
            p = subprocess.Popen('sex', shell=True, stdout=subprocess.PIPE, 
                stderr=subprocess.STDOUT)
        except:
            raise AstroSexError("Unable to run '{0}'. "
                "Please check that it is installed correctly".format(cmd))
        for line in p.stdout.readlines():
            line_split = line.split()
            line_split = map(lambda x: x.lower(), line_split)
            if 'version' in line_split:
                version_idx = line_split.index('version')
                version = line_split[version_idx+1]
                date = line_split[version_idx+2]
                date = date.lstrip('(').rstrip(')')
                break
        return version, date